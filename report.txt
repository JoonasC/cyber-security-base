LINK: link
The project consists of a simple messaging application that allows users to send messages to each other.
The OWASP 2021 top ten list was used to choose the types of flaws the application should have.
The application has three existing users:
- admin:admin
- bob:squarepants
- alice:redqueen
Getting started:
1. Ensure that you have a Python environment with Django installed in it (instructions for this can be found on the course page https://cybersecuritybase.mooc.fi/installation-guide)
2. Run the server with the following command: python3 manage.py runserver

FLAW 1 (XSS injection):
source link
source link
source link
XSS injection is a type of flaw that occurs in web applications when user provided data is inserted into a webpage such that the web browser is able to interpret any code in the inserted data. In this scenario a third party can insert malicious JavaScript into a page, leading to the theft of a victim's personal information or actions being performed on behalf of a victim.
The page that displays the sent and received messages (index.html) uses the "|safe" tag in order for users to be able to format their messages with HTML and CSS. This creates an XSS injection vulnerability.
The flaw can be fixed by removing the "|safe" tag.
For example:
{{ received_message.text|safe }} should be replaced with {{ received_message.text }} and {{ sent_message.text|safe }} should be replaced with {{ sent_message.text }}.

FLAW 2 (Broken access control):
source link
Broken access control is a type of flaw that occurs when an application does not check whether a user has the required privileges to perform an action. In this scenario a third party can perform actions that can potentially damage the application or leak sensitive information.
The function that is used to delete messages does not check whether a user that is trying to delete a message is the author of the message they are trying to delete. Due to this, an authenticated user can delete messages sent by other users.
This can be fixed by checking whether the sent_by field of a message is equal to the value of the request.user variable, and showing an error if not.
For example:
if message.sent_by != request.user:
    return render(request, 'index.html', ... 'error': 'Cannot delete a message sent by another user'})

FLAW 3 (CSRF):
source link
source link
source link
CSRF is a type of flaw that occurs in web applications when the credentials required to perform an action as a user are sent by the browser automatically, and the application implicitly trusts the sent credentials, not verifying the source of the request. In this scenario a third party can lead a victim to a malicious website that causes the victim's browser to send a request to the application, leading to the theft of the victim's personal information or actions being performed on behalf of the victim.
The function that is used to delete messages can be called with a GET request and there is no CSRF token check, which means that a third party site can embed an image tag such as <img src="http://some.address/messenger/delete_message/<some_id>"> and delete messages as an authenticated user.
This can be fixed by checking whether the request method is POST, which will automatically cause Django to require a CSRF token. In addition to this, the index.html template should be modified by replacing the delete link with a form that makes a POST request to the delete route.
For example (for the delete function):
if request.method == 'POST':
    # Code that deletes the message goes here
For example (for the index.html page):
<form method="POST" action="{% url 'delete_message' sent_message.id %}">
{% csrf_token %}
<input type="submit" value="Delete">
</form>

FLAW 4 (Insecure design):
source link
Insecure design is a type of flaw that occurs when some part of an application is designed in a way that is inherently insecure regardless of its implementation.
The "Message" class used to model message entities in the database uses an AUTO INCREMENT id (which is automatically generated by Django), which means that a third party can easily guess the ids of the messages. This could be used to enumerate every message in the system, or delete every message in the system if combined with the flaws in the delete function.
This can be fixed by using a UUID field for the id.
For example:
id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

FLAW 5 (Security misconfiguration):
this is a configuration flaw in the database, so it does not have a source link
Security misconfiguration is a type of flaw that occurs when some part of an application is configured in a way that is insecure despite the fact that it is designed and implemented securely.
The admin user has the insecure password "admin". This username and password combination is so commonly used, that it is included by default in many brute-force authentication scripts and bots. Due to this, a third party can easily gain access to the admin account, granting them administrative privileges on the site.
The flaw can be fixed by changing the password of the admin user to a more secure one (preferably generated using a password generator) using either the Django admin panel or the Django manage.py script.
For example:
python3 manage.py changepassword admin